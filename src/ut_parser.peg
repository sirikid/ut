%% -*- mode: erlang; -*-

template <- (literals / expression)* !. `lists:append(Node)`;

literals <- ([!#$&\'()*+,\\-./0-9:;=?@A-Z\\[\\]_a-z~] / pct_encoded)+
`unicode:characters_to_binary(Node)`;

%% FIXME: ucschar and iprivate does not work
%% ** exception error: no match of right hand side value
%% {error,{"invalid UTF-8 string",1}}

%% ucschar <- [\xA0-\xD7FF] / [\xF900-\xFDCF] / [\xFDF0-\xFFEF] /
%% [\x10000-\x1FFFD] / [\x20000-\x2FFFD] / [\x30000-\x3FFFD] /
%% [\x40000-\x4FFFD] / [\x50000-\x5FFFD] / [\x60000-\x6FFFD] /
%% [\x70000-\x7FFFD] / [\x80000-\x8FFFD] / [\x90000-\x9FFFD] /
%% [\xA0000-\xAFFFD] / [\xB0000-\xBFFFD] / [\xC0000-\xCFFFD] /
%% [\xD0000-\xDFFFD] / [\xE1000-\xEFFFD];

%% iprivate <- [\xE000-\xF8FF] / [\xF0000-\xFFFFD] / [\x100000-\x10FFFD];

pct_encoded <- "%" [0-9A-Za-z] [0-9A-Za-z];

expression <- "{" operator variables "}"
`list_to_tuple(lists:droplast(tl(Node)))`;

operator <- [+#./;?&=,!@|]?
`
case Node of
    [] -> simple;
    <<"+">> -> reserved;
    <<"#">> -> fragment;
    <<".">> -> labels;
    <<"/">> -> path;
    <<";">> -> parameter;
    <<"?">> -> query;
    <<"&">> -> query_cont;
    Other -> {reserved_for_future_extensions, Other}
end
`;

variables <- variable ("," variable)* `repeat_to_list(<<",">>, Node)`;

variable <- (key ("." key)*) ("*" / ":" [0-9]+)?
`
[Keys, Suffix] = Node,
#ut_var{
   name=unicode:characters_to_binary(Keys),
   path=repeat_to_list(<<".">>, Keys),
   modifier=
       case Suffix of
           [] -> none;
           <<"*">> -> exploded;
           [<<":">>, Limit] ->
               {trim, binary_to_integer(unicode:characters_to_binary(Limit))}
       end
  }
`;

key <- ([0-9A-Z_a-z] / pct_encoded)+ `unicode:characters_to_binary(Node)`;

%% Erlang code.
`
-include("ut_records.hrl").

-spec repeat_to_list(S, [T | [S | T]]) -> [T] when S :: term(), T :: term().
repeat_to_list(Sep, [Hd, Tl]) ->
    [Hd | lists:map(fun([S, Elt]) when S == Sep -> Elt end, Tl)].
`
